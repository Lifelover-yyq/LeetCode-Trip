'''
给定n个非负整数a1，a2，...，an，其中每个值表示坐标（i，ai）处的点。绘制n条垂直线，使得线i的两个端点位于（i，ai）和（i，0）。
找到两条线，它们与x轴一起形成一个容器，这样的容器含有最多的水。
蛮力法是最容易想到的，两个for遍历，比较每次的area取大，不过用Python会Time Limit Exceeded……
时间复杂度较好（O(n)）的方法是：在两端用两个指针，每次使高度小的那一个往里面缩一步，过程中不断计算area取大。
'''
# solution 1 蛮力
class Solution:
    def maxArea(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        area = 0
        for i in range(len(height) - 1):
            for j in range(i+1,len(height)):
                area = max(area,min(height[i],height[j])*(j - i))
        return area
class Solution:
# solution 2 两指针法
    def maxArea(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        left = 0
        right = len(height) - 1
        area = 0
        while right > left:
            area = max(area,min(height[left],height[right])*(right - left))
            if height[left] <= height[right]:
                left += 1
            else:
                right -= 1
        return area
